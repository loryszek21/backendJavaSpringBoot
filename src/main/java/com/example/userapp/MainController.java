package com.example.userapp;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

//import javax.xml.bind.JAXBContext;
//import javax.xml.bind.JAXBException;
//import javax.xml.bind.Unmarshaller;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.Unmarshaller;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;

@RestController
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UsersRepository usersRepository;
//    @PostMapping(path="/add") // Map ONLY POST Requests
//    public @ResponseBody String addNewUser (@RequestParam String login
//            , @RequestParam String name) {
//        // @ResponseBody means the returned String is the response, not a view name
//        // @RequestParam means it is a parameter from the GET or POST request
//
//        Users n = new Users();
//        n.setLogin(login);
//        n.setName(name);
//
//        usersRepository.save(n);
//        return "Saved";
//    }

    @PostMapping(path = "add")
    public @ResponseBody String addNewUser(@RequestParam("file")MultipartFile file){
        if(file.isEmpty()){
            return "Failed to uplaod empty file";
        }
        try{

            XmlMapper xmlMapper = new XmlMapper();
            UsersList usersList = xmlMapper.readValue(file.getBytes(), UsersList.class);
//            UsersList usersList1 = xmlMapper.readValue(file.getBytes(), UsersList.class);
//            System.out.println("Received XML content: " + new String(file.getBytes()));

//            UsersList usersList = (UsersList) jaxbUnmarshaller.unmarshal(file.getInputStream());
            System.out.println("Stage6");
        // Zapisywanie użytkowników do bazy danych
        List<Users> users = usersList.getUsers();
        usersRepository.saveAll(users);

        return "Saved";
    } catch (IOException  e) {
        e.printStackTrace();
        System.out.println(e);
        return "Failed to process XML file.";
    }
}

    @GetMapping(path = "/all")
    public @ResponseBody Iterable<Users> getAllUsers() {
        return usersRepository.findAll();
    }
}

